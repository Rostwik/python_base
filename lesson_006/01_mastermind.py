# -*- coding: utf-8 -*-

# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названном числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названном числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В этом модуле нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем делать в текущем модуле. Представьте, что движок игры могут использовать
# разные клиенты - веб, чатбот, приложение, етс - они знают как спрашивать и отвечать пользователю.
# Движок игры реализует только саму функциональность игры.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT

from lesson_006.mastermind_engine import make_number, check_number
from termcolor import cprint, colored


def verify_user_number(user_number):
    if not user_number.isdigit():
        print('Вы ввели текстовую информацию')
        return False
    else:
        if len(user_number) != 4:
            print('Введена цифра несоответствующей разрядности')
            return False
        else:
            if user_number[0] == '0':
                print('Первая цифра не должна быть нулем')
                return False
            else:
                return True


def game():
    number_of_moves = 0
    while True:

        number_of_moves += 1
        user_number = input(colored('Введите предполагаемое число:', color='yellow'))
        while not verify_user_number(user_number):
            user_number = input()
        hint = check_number(user_number)
        if hint['bulls'] != 4:
            print('Быков: ', hint['bulls'], 'Коров: ', hint['cows'])
            cprint('К сожалению, Вы не угадали. Попробуйте еще раз:', color='red')
        else:
            return number_of_moves


hint = {}
number_of_moves = 0

cprint('***********БЫКИ И КОРОВЫ***********', color='cyan')

while True:

    make_number()
    cprint('Компьютер загадал число.', color='cyan')
    number_of_moves = game()

    cprint('Поздравляю, Игра окончена. Количество ходов составило:', color='green')
    cprint(number_of_moves, color='green')

    user_choice = input(colored('Хотите еще партию?(Да/Нет)', color='green'))
    if user_choice == 'Нет':
        cprint('До свидания.', color='blue')
        break
